package editor.ontologies; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from http://www.ontologydesignpatterns.org/ont/dul/DUL.owl 
 * @author Auto-generated by schemagen on 14 Sep 2012 13:40 
 */
public class DUL {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS
     *  @return Namespace*/
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>Any Entity that cannot be located in space-time. E.g. mathematical entities: 
     *  formal semantics elements, regions within dimensional spaces, etc.</p>
     */
    public static final Resource Abstract = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Abstract" );
    
    /** <p>An Event with at least one Agent that isParticipantIn it, and that executes 
     *  a Task that typically isDefinedIn a Plan, Workflow, Project, etc.</p>
     */
    public static final Resource Action = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action" );
    
    /** <p>Any agentive Object , either physical (e.g. a whale, a robot, an oak), or 
     *  social (e.g. a corporation, an institution, a community).Additional comment: 
     *  a computational agent can be considered as a PhysicalAgent that realizes a 
     *  certain class of algorithms (that can be considered as instances of InformationObject) 
     *  that allow to obtain some behaviors that are considered typical of agents 
     *  in general. For an ontology of computational objects based on DOLCE see e.g. 
     *  http://www.loa-cnr.it/COS/COS.owl, and http://www.loa-cnr.it/KCO/KCO.owl.</p>
     */
    public static final Resource Agent = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent" );
    
    /** <p>A quantity, independently from how it is measured, computed, etc.</p> */
    public static final Resource Amount = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Amount" );
    
    public static final Resource BiologicalObject = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#BiologicalObject" );
    
    public static final Resource ChemicalObject = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#ChemicalObject" );
    
    /** <p>A special kind of Situation that allows to include time indexing for the classifies 
     *  relation in situations. For example, if a Situation s 'my old cradle is used 
     *  in these days as a flower pot' isSettingFor the entity 'my old cradle' and 
     *  the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies 
     *  a functional Description for aesthetic objects, which defines the Concepts 
     *  'flower pot' and 'flower', then we also need to know what concept classifies 
     *  'my old cradle' at what time. In order to solve this issue, we need to create 
     *  a sub-situation s' for the classification time: 'my old cradle is a flower 
     *  pot in 8June2007'. Such sub-situation s' isPartOf s.</p>
     */
    public static final Resource Classification = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Classification" );
    
    /** <p>Any container for entities that share one or more common properties. E.g. 
     *  "stone objects", "the nurses", "the Louvre Aegyptian collection", all the 
     *  elections for the Italian President of the Republic. A collection is not a 
     *  logical class: a collection is a first-order entity, while a class is second-order.</p>
     */
    public static final Resource Collection = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collection" );
    
    /** <p>A Collection whose members are agents, e.g. "the nurses", "the Italian rockabilly 
     *  fans". Collectives, facon de parler, can act as agents, although they are 
     *  not assumed here to be agents (they are even disjoint from the class SocialAgent). 
     *  This is represented by admitting collectives in the range of the relations 
     *  having Agent in their domain or range.</p>
     */
    public static final Resource Collective = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collective" );
    
    /** <p>A SocialAgent that is actedBy agents that are (and act as) members of a Collective. 
     *  A collective agent can have roles that are also roles of those agents. For 
     *  example, in sociology, a 'group action' is the situation in which a number 
     *  of people (that result to be members of a collective) in a given area behave 
     *  in a coordinated way in order to achieve a (often common) goal. The Agent 
     *  in such a Situation is not single, but a CollectiveAgent (a Group). This can 
     *  be generalized to the notion of social movement, which assumes a large Community 
     *  or even the entire Society as agents. The difference between a CollectiveAgent 
     *  and an Organization is that a Description that introduces a CollectiveAgent 
     *  is also one that unifies the corresponding Collective. In practice, this difference 
     *  makes collective agents 'less stable' than organizations, because they have 
     *  a dedicated, publicly recognizable Description that is conceived to introduce 
     *  them.</p>
     */
    public static final Resource CollectiveAgent = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#CollectiveAgent" );
    
    public static final Resource Community = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Community" );
    
    /** <p>A Concept is a SocialObject, and isDefinedIn some Description; once defined, 
     *  a Concept can be used in other Description(s). If a Concept isDefinedIn exactly 
     *  one Description, see the LocalConcept class. The classifies relation relates 
     *  Concept(s) to Entity(s) at some TimeInterval</p>
     */
    public static final Resource Concept = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Concept" );
    
    /** <p>A collection whose members are 'unified', i.e. organized according to a certain 
     *  schema that can be represented by a Description. Typically, a configuration 
     *  is the collection that emerges out of a composed entity: an industrial artifact, 
     *  a plan, a discourse, etc. E.g. a physical book has a configuration provided 
     *  by the part-whole schema that holds together its cover, pages, ink. That schema, 
     *  based on the individual relations between the book and its parts, can be represented 
     *  in a reified way by means of a (structural) description, which is said to 
     *  'unify' the book configuration.</p>
     */
    public static final Resource Configuration = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Configuration" );
    
    /** <p>(The content of) an agreement between at least two agents that play a Party 
     *  Role, about some contract object (a Task to be executed).</p>
     */
    public static final Resource Contract = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Contract" );
    
    /** <p>A Description is a SocialObject that represents a conceptualization. It can 
     *  be thought also as a 'descriptive context' that uses or defines concepts in 
     *  order to create a view on a 'relational context' (cf. Situation) out of a 
     *  set of data or observations. For example, a Plan is a Description of some 
     *  actions to be executed by agents in a certain way, with certain parameters; 
     *  a Diagnosis is a Description that provides an interpretation for a set of 
     *  observed entities, etc.</p>
     */
    public static final Resource Description = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description" );
    
    /** <p>A Description of the Situation, in terms of structure and function, held by 
     *  an Entity for some reason. A design is usually accompanied by the rationales 
     *  behind the construction of the designed Entity (i.e. of the reasons why a 
     *  design is claimed to be as such). For example, the actual design (a Situation) 
     *  of a car or of a law is based on both the specification (a Description) of 
     *  the structure, and the rationales used to construct cars or laws. While designs 
     *  typically describe entities to be constructed, they can also be used to describe 
     *  'refunctionalized' entities, or to hypothesize unknown functions. For example, 
     *  a cradle can be refunctionalized as a flowerpot based on a certain home design.</p>
     */
    public static final Resource Design = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Design" );
    
    /** <p>A PhysicalArtifact that is also described by a Design. This excludes simple 
     *  recycling or refunctionalization of natural objects. Most common sense 'artifacts' 
     *  can be included in this class: cars, lamps, houses, chips, etc.</p>
     */
    public static final Resource DesignedArtifact = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#DesignedArtifact" );
    
    public static final Resource DesignedSubstance = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#DesignedSubstance" );
    
    /** <p>A Description of the Situation of a system, usually applied in order to control 
     *  a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown).</p>
     */
    public static final Resource Diagnosis = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Diagnosis" );
    
    /** <p>Anything: real, possible, or imaginary, which some modeller wants to talk 
     *  about for some purpose.</p>
     */
    public static final Resource Entity = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity" );
    
    /** <p>Any physical, social, or mental process, event, or state. More theoretically, 
     *  events can be classified in different ways, possibly based on 'aspect' (e.g. 
     *  stative, continuous, accomplishement, achievement, etc.), on 'agentivity' 
     *  (e.g. intentional, natural, etc.), or on 'typical participants' (e.g. human, 
     *  physical, abstract, food, etc.). Here no special direction is taken, and the 
     *  following explains why: events are related to observable situations, and they 
     *  can have different views at a same time. If a position has to be suggested 
     *  here anyway, the participant-based classification of events seems the most 
     *  stable and appropriate for many modelling problems. (1) Alternative aspectual 
     *  views Consider a same event 'rock erosion in the Sinni valley': it can be 
     *  conceptualized as an accomplishment (what has brought a certain state to occur), 
     *  as an achievement (the state resulting from a previous accomplishment), as 
     *  a punctual event (if we collapse the time interval of the erosion into a time 
     *  point), or as a transition (something that has changed a state to a different 
     *  one). In the erosion case, we could therefore have good motivations to shift 
     *  from one aspect to another: a) causation focus, b) effectual focus, c) historical 
     *  condensation d) transition (causality). The different views refer to the same 
     *  event, but are still different: how to live with this seeming paradox? A typical 
     *  solution e.g. in linguistics (cf. Levin's aspectual classes) and in DOLCE 
     *  Full (cf. WonderWeb D18 axiomatization) is to classify events based on aspectual 
     *  differences. But this solution would create different identities for a same 
     *  event, where the difference is only based on the modeller's attitude. An alternative 
     *  solution is applied here, and exploits the notion of (observable) Situation; 
     *  a Situation is a view, consistent with a Description, which can be observed 
     *  of a set of entities. It can also be seen as a 'relational context' created 
     *  by an observer on the basis of a 'frame'. Therefore, a Situation allows to 
     *  create a context where each particular view can have a proper identity, while 
     *  the Event preserves its own identity. For example, ErosionAsAccomplishment 
     *  is a Situation where rock erosion is observed as a process leading to a certain 
     *  achievement: the conditions (roles, parameters) that suggest such view are 
     *  stated in a Description, which acts as a 'theory of accomplishments'. Similarly, 
     *  ErosionAsTransition is a Situation where rock erosion is observed as an event 
     *  that has changed a state to another: the conditions for such interpretation 
     *  are stated in a different Description, which acts as a 'theory of state transitions'. 
     *  Consider that in no case the Event is changed or enriched in parts by the 
     *  aspectual view. (2) Alternative intentionality views Similarly to aspectual 
     *  views, several intentionality views can be provided for a same Event. For 
     *  example, one can investigate if an avalanche has been caused by immediate 
     *  natural forces, or if there is any hint of an intentional effort to activate 
     *  those natural forces. Also in this case, the Event as such has not different 
     *  identities, while the causal analysis generates situations with different 
     *  identities, according to what Description is taken for interpreting the Event. 
     *  On the other hand, if the possible actions of an Agent causing the starting 
     *  of an avalanche are taken as parts of the Event, then this makes its identity 
     *  change, because we are adding a part to it. Therefore, if intentionality is 
     *  a criterion to classify events or not depends on if an ontology designer wants 
     *  to consider causality as a relevant dimension for events' identity. (3) Alternative 
     *  participant views A slightly different case is when we consider the basic 
     *  participants to an Event. In this case, the identity of the Event is affected 
     *  by the participating objects, because it depends on them. For example, if 
     *  snow, mountain slopes, wind, waves, etc. are considered as an avalanche basic 
     *  participants, or if we also want to add water, human agents, etc., makes the 
     *  identity of an avalanche change. Anyway, this approach to event classification 
     *  is based on the designer's choices, and more accurately mirrors lexical or 
     *  commonsense classifications (see. e.g. WordNet 'supersenses' for verb synsets). 
     *  Ultimately, this discussion has no end, because realists will keep defending 
     *  the idea that events in reality are not changed by the way we describe them, 
     *  while constructivists will keep defending the idea that, whatever 'true reality' 
     *  is about, it can't be modelled without the theoretical burden of how we observe 
     *  and describe it. Both positions are in principle valid, but, if taken too 
     *  radically, they focus on issues that are only partly relevant to the aim of 
     *  computational ontologies, which only attempt to assist domain experts in representing 
     *  what they want to conceptualize about a certain portion of reality according 
     *  to their own ideas. For this reason, in this ontology both events and situations 
     *  are allowed, together with descriptions, in order to encode the modelling 
     *  needs independently from the position (if any) chosen by the designer.</p>
     */
    public static final Resource Event = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event" );
    
    /** <p>A Concept that classifies an Event . An event type describes how an Event 
     *  should be interpreted, executed, expected, seen, etc., according to the Description 
     *  that the EventType isDefinedIn (or used in)</p>
     */
    public static final Resource EventType = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType" );
    
    /** <p>Entities that are formally defined and are considered independent from the 
     *  social context in which they are used. They cannot be localized in space or 
     *  time. Also called 'Platonic entities'. Mathematical and logical entities are 
     *  included in this class: sets, categories, tuples, costants, variables, etc. 
     *  Abstract formal entities are distinguished from information objects, which 
     *  are supposed to be part of a social context, and are localized in space and 
     *  time, therefore being (social) objects. For example, the class 'Quark' is 
     *  an abstract formal entity from the purely set-theoretical perspective, but 
     *  it is an InformationObject from the viewpoint of ontology design, when e.g. 
     *  implemented in a logical language like OWL. Abstract formal entities are also 
     *  distinguished from Concept(s), Collection(s), and Description(s), which are 
     *  part of a social context, therefore being SocialObject(s) as well. For example, 
     *  the class 'Quark' is an abstract FormalEntity from the purely set-theoretical 
     *  perspective, but it is a Concept within history of science and cultural dynamics. 
     *  These distinctions allow to represent two different notions of 'semantics': 
     *  the first one is abstract and formal ('formal semantics'), and formallyInterprets 
     *  symbols that are about entities whatsoever; for example, the term 'Quark' 
     *  isAbout the Collection of all quarks, and that Collection isFormalGroundingFor 
     *  the abstract class 'Quark' (in the extensional sense). The second notion is 
     *  social, localized in space-time ('social semantics'), and can be used to interpret 
     *  entities in the intensional sense. For example, the Collection of all quarks 
     *  isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'.</p>
     */
    public static final Resource FormalEntity = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#FormalEntity" );
    
    public static final Resource FunctionalSubstance = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#FunctionalSubstance" );
    
    /** <p>The Description of a Situation that is desired by an Agent, and usually associated 
     *  to a Plan that describes how to actually achieve it</p>
     */
    public static final Resource Goal = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Goal" );
    
    /** <p>A CollectiveAgent whose acting agents conceptualize a same SocialRelation 
     *  .</p>
     */
    public static final Resource Group = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Group" );
    
    /** <p>A piece of information, be it concretely realized or not.</p> */
    public static final Resource InformationEntity = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity" );
    
    /** <p>A piece of information, such as a musical composition, a text, a word, a picture, 
     *  independently from how it is concretely realized.</p>
     */
    public static final Resource InformationObject = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject" );
    
    /** <p>A concrete realization of an InformationObject, e.g. the written document 
     *  containing the text of a law.</p>
     */
    public static final Resource InformationRealization = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization" );
    
    /** <p>A Concept that isDefinedIn exactly 1 Description. For example, the Concept 
     *  'coffee' in a 'preparesCoffee' relation can be defined in that relation, and 
     *  for all other Description(s) that use it, the isConceptUsedIn property should 
     *  be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn 
     *  exactly 1 Description.</p>
     */
    public static final Resource LocalConcept = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#LocalConcept" );
    
    /** <p>A method is a Description that defines or uses concepts in order to guide 
     *  carrying out actions aimed at a solution with respect to a problem. It is 
     *  different from a Plan, because plans could be carried out in order to follow 
     *  a method, but a method can be followed by executing alternative plans.</p>
     */
    public static final Resource Method = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Method" );
    
    public static final Resource Narrative = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Narrative" );
    
    /** <p>A person in the physical commonsense intuition: 'have you seen that person 
     *  walking down the street?'</p>
     */
    public static final Resource NaturalPerson = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#NaturalPerson" );
    
    /** <p>A social norm.</p> */
    public static final Resource Norm = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Norm" );
    
    /** <p>Any physical, social, or mental object, or a substance</p> */
    public static final Resource Object = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object" );
    
    /** <p>A physical objects with biological characteristics, typically that organisms 
     *  can self-reproduce.</p>
     */
    public static final Resource Organism = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Organism" );
    
    /** <p>Un agente sociale strutturato internamente e creato convenzionalmente. Per 
     *  agire, ha bisogno di ruoli e agenti che li ricoprano.An internally structured, 
     *  conventionally created SocialAgent, needing a specific Role and Agent that 
     *  plays it, in order to act.</p>
     */
    public static final Resource Organization = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Organization" );
    
    /** <p>A Concept that classifies a Region; the difference between a Region and a 
     *  Parameter is that regions represent sets of observable values, e.g. the height 
     *  of a given building, while parameters represent constraints or selections 
     *  on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used 
     *  to constrain regions, e.g. VeryHigh on a subset of values of the Region Height 
     *  applied to buildings, or to add an external selection criterion , such as 
     *  measurement units, to regions, e.g. Meter on a subset of values from the Region 
     *  Length applied to the Region Length applied to roads.</p>
     */
    public static final Resource Parameter = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter" );
    
    /** <p>Any invariance detected from a dataset, or from observation; also, any invariance 
     *  proposed based on top-down considerations. E.g. patterns detected and abstracted 
     *  by an organism, by pattern recognition algorithms, by machine learning techniques, 
     *  etc. An occurrence of a pattern is an 'observable', or detected Situation</p>
     */
    public static final Resource Pattern = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Pattern" );
    
    /** <p>Persons in commonsense intuition, which does not apparently distinguish between 
     *  either natural or social persons.</p>
     */
    public static final Resource Person = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Person" );
    
    /** <p>A social entity with agentive features, but whose status is the result of 
     *  a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, 
     *  another SocialObject, etc. For example: the holy grail, deus ex machina, gods, 
     *  magic wands, etc.</p>
     */
    public static final Resource Personification = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Personification" );
    
    /** <p>A PhysicalObject that is capable of self-representing (conceptualizing) a 
     *  Description in order to plan an Action. A PhysicalAgent is a substrate for 
     *  (actsFor) a Social Agent</p>
     */
    public static final Resource PhysicalAgent = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalAgent" );
    
    /** <p>Any PhysicalObject that isDescribedBy a Plan . This axiomatization is weak, 
     *  but allows to talk of artifacts in a very general sense, i.e. including recycled 
     *  objects, objects with an intentional functional change, natural objects that 
     *  are given a certain function, even though they are not modified or structurally 
     *  designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), 
     *  in order to allow a dual classification when needed. E.g., FunctionalSubstance(s) 
     *  are included here as well. Immaterial (non-physical) artifacts (e.g. texts, 
     *  ideas, cultural movements, corporations, communities, etc. can be modelled 
     *  as social objects (see SocialObject), which are all 'artifactual' in the weak 
     *  sense assumed here.</p>
     */
    public static final Resource PhysicalArtifact = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalArtifact" );
    
    /** <p>Physical value of a physical object, e.g. density, color, etc.</p> */
    public static final Resource PhysicalAttribute = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalAttribute" );
    
    /** <p>Physical bodies are PhysicalObject(s), for which we tend to neutralize any 
     *  possible artifactual character. They can have several granularity levels: 
     *  geological, chemical, physical, biological, etc.</p>
     */
    public static final Resource PhysicalBody = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalBody" );
    
    /** <p>Any Object that has a proper space region. The prototypical physical object 
     *  has also an associated mass, but the nature of its mass can greatly vary based 
     *  on the epistemological status of the object (scientifically measured, subjectively 
     *  possible, imaginary).</p>
     */
    public static final Resource PhysicalObject = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject" );
    
    /** <p>A physical object that is inherently located; for example, a water area.</p> */
    public static final Resource PhysicalPlace = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalPlace" );
    
    /** <p>A location, in a very generic sense: a political geographic entity (Roma, 
     *  Lesotho), a non-material location determined by the presence of other entities 
     *  ("the area close to Roma"), pivot events or signs ("the area where the helicopter 
     *  fell"), complements of other entities ("the area under the table"), etc. In 
     *  this generic sense, a Place is an "approximate" location. For an "absolute" 
     *  location, see the class SpaceRegion</p>
     */
    public static final Resource Place = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Place" );
    
    /** <p>A Description having an explicit Goal, to be achieved by executing the plan</p> */
    public static final Resource Plan = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan" );
    
    /** <p>Plan executions are situations that proactively satisfy a plan. Subplan executions 
     *  are proper parts of the whole plan execution.</p>
     */
    public static final Resource PlanExecution = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PlanExecution" );
    
    /** <p>This is a placeholder for events that are considered in their evolution, or 
     *  anyway not strictly dependent on agents, tasks, and plans. See Event class 
     *  for some thoughts on classifying events. See also 'Transition'.</p>
     */
    public static final Resource Process = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Process" );
    
    /** <p>A Plan that defines Role(s), Task(s), and a specific structure for tasks to 
     *  be executed in relation to goals to be achieved, in order to achieve the main 
     *  goal of the project. In other words, a project is a plan with a subgoal structure 
     *  and multiple roles and tasks.</p>
     */
    public static final Resource Project = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Project" );
    
    /** <p>Any aspect of an Entity (but not a part of it), which cannot exist without 
     *  that Entity. For example, the way the surface of a specific PhysicalObject 
     *  looks like is a Quality, while the encoding of that Quality into e.g. a PhysicalAttribute 
     *  should be modeled as a Region. From the design viewpoint, the Quality-Region 
     *  distinction is useful only when individual aspects of an Entity are considered 
     *  in a domain of discourse. For example, in an automotive context, it would 
     *  be irrelevant to consider the aspects of car windows for a specific car, unless 
     *  the factory wants to check a specific window against design parameters (anomaly 
     *  detection). On the other hand, in an antiques context, the individual aspects 
     *  for a specific piece of furniture are a major focus of attention, and may 
     *  constitute the actual added value, because the design parameters for old furniture 
     *  are often not fixed, and may not be viewed as 'anomalies'.</p>
     */
    public static final Resource Quality = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Quality" );
    
    /** <p>Any region in a dimensional space (a dimensional space is a maximal Region), 
     *  which can be used as a value for a quality of an Entity . For example, TimeInterval, 
     *  SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses 
     *  of Region. Regions are not data values in the ordinary knowledge representation 
     *  sense; in order to get patterns for modelling data, see the properties: representsDataValue 
     *  and hasDataValue</p>
     */
    public static final Resource Region = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Region" );
    
    /** <p>Relations are descriptions that can be considered as the counterpart of formal 
     *  relations (that are included in the FormalEntity class). For example, 'givingGrantToInstitution(x,y,z)' 
     *  with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation 
     *  counterpart: 'GivingGrantToInstitution', which defines three Concept instances: 
     *  Provider,Grant,Recipient. Since social objects are not formal entities, Relation 
     *  includes here any 'relation-like' entity in common sense, including social 
     *  relations.</p>
     */
    public static final Resource Relation = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Relation" );
    
    /** <p>A legal position by which an Agent is entitled to obtain something from another 
     *  Agent , under specified circumstances, through an enforcement explicited either 
     *  in a Law, Contract , etc.</p>
     */
    public static final Resource Right = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Right" );
    
    /** <p>A Concept that classifies an Object</p> */
    public static final Resource Role = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role" );
    
    public static final Resource Set = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Set" );
    
    /** <p>A view, consistent with ('satisfying') a Description, on a set of entities. 
     *  It can also be seen as a 'relational context' created by an observer on the 
     *  basis of a 'frame' (i.e. a Description). For example, a PlanExecution is a 
     *  context including some actions executed by agents according to certain parameters 
     *  and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context 
     *  of observed entities that is interpreted on the basis of a Diagnosis, etc. 
     *  Situation is also able to represent reified n-ary relations, where isSettingFor 
     *  is the top-level relation for all binary projections of the n-ary relation. 
     *  If used in a transformation pattern for n-ary relations, the designer should 
     *  take care of creating only one subclass of Situation for each n-ary relation, 
     *  otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) could 
     *  be violated.</p>
     */
    public static final Resource Situation = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation" );
    
    /** <p>Any individual whose existence is granted simply by its social communicability 
     *  and capability of action (through some PhysicalAgent).</p>
     */
    public static final Resource SocialAgent = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialAgent" );
    
    /** <p>Any Object that exists only within some communication Event, in which at least 
     *  one PhysicalObject participates in. In other words, all objects that have 
     *  been or are created in the process of social communication: for the sake of 
     *  communication (InformationObject), for incorporating new individuals (SocialAgent, 
     *  Place), for contextualizing existing entities (Situation), for collecting 
     *  existing entities (Collection), or for describing existing entities (Description, 
     *  Concept). Being dependent on communication, all social objects need to be 
     *  expressed by some information object (information object are self-expressing).</p>
     */
    public static final Resource SocialObject = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialObject" );
    
    /** <p>Any Region in a dimensional space that is used to represent some characteristic 
     *  of a SocialObject, e.g. judgment values, social scalars, statistical attributes 
     *  over a collection of entities, etc.</p>
     */
    public static final Resource SocialObjectAttribute = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialObjectAttribute" );
    
    /** <p>A SocialAgent that needs the existence of a specific NaturalPerson in order 
     *  to act (but the lifetime of the NaturalPerson has only to overlap that of 
     *  the SocialPerson).</p>
     */
    public static final Resource SocialPerson = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialPerson" );
    
    /** <p>Any social relationship</p> */
    public static final Resource SocialRelation = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialRelation" );
    
    /** <p>Any Region in a dimensional space that is used to localize an Entity ; i.e., 
     *  it is not used to represent some characteristic (e.g. it excludes time intervals, 
     *  colors, size values, judgment values, etc.). Differently from a Place , a 
     *  space region has a specific dimensional space.</p>
     */
    public static final Resource SpaceRegion = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SpaceRegion" );
    
    public static final Resource SpatioTemporalRegion = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SpatioTemporalRegion" );
    
    /** <p>Any PhysicalBody that has not necessarily specified (designed) boundaries, 
     *  e.g. a pile of trash, some sand, etc. In this sense, an artistic object made 
     *  of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, 
     *  and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric 
     *  objects that are outcomes of an artistic process might be still considered 
     *  DesignedArtifact(s), and Substance(s).</p>
     */
    public static final Resource Substance = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Substance" );
    
    /** <p>An EventType that classifies an Action to be executed. For example, reaching 
     *  a destination is a task that can be executed by performing certain actions, 
     *  e.g. driving a car, buying a train ticket, etc. The actions to execute a task 
     *  can also be organized according to a Plan that is not the same as the one 
     *  that defines the task (if any). For example, reaching a destination could 
     *  be defined by a plan to get on holidays, while the plan to execute the task 
     *  can consist of putting some travels into a sequence.</p>
     */
    public static final Resource Task = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task" );
    
    /** <p>A Theory is a Description that represents a set of assumptions for describing 
     *  something, usually general. Scientific, philosophical, and commonsense theories 
     *  can be included here. This class can also be used to act as 'naturalized reifications' 
     *  of logical theories (of course, they will be necessarily incomplete in this 
     *  case, because second-order entities are represented as first-order ones).</p>
     */
    public static final Resource Theory = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Theory" );
    
    /** <p>Any Region in a dimensional space that aims at representing time.</p> */
    public static final Resource TimeInterval = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#TimeInterval" );
    
    /** <p>A transition is a Situation that creates a context for three TimeInterval(s), 
     *  two additional different Situation(s), one Event, one Process, and at least 
     *  one Object: the Event is observed as the cause for the transition, one Situation 
     *  is the state before the transition, the second Situation is the state after 
     *  the transition, the Process is the invariance under some different transitions 
     *  (including the one represented here), in which at least one Object is situated. 
     *  Finally, the time intervals position the situations and the transitional event 
     *  in time. This class of situations partly encodes the ontology underlying typical 
     *  engineering algebras for processes, e.g. Petri Nets. A full representation 
     *  of the transition ontology is outside the expressivity of OWL, because we 
     *  would need qualified cardinality restrictions, coreference, property equivalence, 
     *  and property composition.</p>
     */
    public static final Resource Transition = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition" );
    
    /** <p>A Collection whose members are the maximal set of individuals that share the 
     *  same (named) type, e.g. "the gem stones", "the Italians". This class is very 
     *  useful to apply a variety of the so-called "ClassesAsValues" design pattern, 
     *  when it is used to talk about the extensional aspect of a class. An alternative 
     *  variety of the pattern applies to the intensional aspect of a class, and the 
     *  class Concept should be used instead.</p>
     */
    public static final Resource TypeCollection = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#TypeCollection" );
    
    /** <p>Units of measure are conceptualized here as parameters on regions, which can 
     *  be valued as datatype values.</p>
     */
    public static final Resource UnitOfMeasure = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#UnitOfMeasure" );
    
    /** <p>A Plan that defines Role(s), Task(s), and a specific structure for tasks to 
     *  be executed, usually supporting the work of an Organization</p>
     */
    public static final Resource Workflow = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow" );
    
    public static final Resource WorkflowExecution = m_model.createResource( "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#WorkflowExecution" );
    
}
